// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model User {
  id      Int      @id @unique @default(autoincrement())
  email   String   @unique
  password    String
  location    String
  phone       String @unique
  orders      Order[]

}
model Restaurant {
  id             Int      @id @unique @default(autoincrement())
  email          String   @unique
  admin_name     String
  resturant_name String
  password       String
  phone          String
  location       String
  logo           String 
  order          Order[]
  menu           Menu[]
  resturantusers Resturantuser[] 
    

}
model Resturantuser {
  id             Int        @id @unique @default(autoincrement())
  email          String     @unique
  password       String
  name           String
  resturantId    Int
  phone          String
  location       String
  roleId         Int
  
  restaurant     Restaurant  @relation(fields: [resturantId], references: [id],onDelete: Cascade)
      
}
model Role {
  id            Int              @id @unique @default(autoincrement())
  name          String 
  resturantId   Int               
  permissions   Permission[]

  
}
model Permission {
  id        Int    @id @default(autoincrement())
  action    String 
  resource  String 
  roleId    Int    
  role      Role   @relation( fields: [roleId], references: [id]) 
}
model Menu {
  id          Int      @id @default(autoincrement())
  resturantId Int
  name        String
  toping      String[] // This allows for multiple ingredients
  price       Float    // Assuming price is a decimal value
  photo       String   // URL or path to the photo
  resturant   Restaurant  @relation(fields: [resturantId], references: [id],onDelete: Cascade)

}

model Order {
  id             Int      @id @default(autoincrement())
  userID         Int
  resturantId    Int
  name           String
  toping         String[]
  quantity       Int
  photo          String
  status         String      @default("ready") 
  resturant      Restaurant  @relation(fields: [resturantId], references: [id],onDelete: Cascade)
  users          User        @relation(fields: [userID], references: [id],onDelete: Cascade)
 
}